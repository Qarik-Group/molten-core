jobs:
- name: deploy-k8s
  plan:
  - in_parallel:
    - get: kubo-deployment
      trigger: true
    - get: stemcell
    - get: opsfile
    - get: cloud-config
  - put: config
    params:
      manifest: cloud-config/cloud-config.yml
  - put: deploy
    params:
      manifest: kubo-deployment/manifests/cfcr.yml
      stemcells: [ stemcell/stemcell.tgz ]
      ops_files:
      - kubo-deployment/manifests/ops-files/add-vm-extensions-to-master.yml
      - kubo-deployment/manifests/ops-files/add-hostname-to-master-certificate.yml
      - opsfile/opsfile.yml
      vars:
        api-hostname: ((moltencore.public_ips.z0))
  - put: errand
    params:
      name: apply-specs
      when_changed: true
- name: generate-k8s-cli-config
  public: false
  plan:
  - task: generate-config
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: {repository: starkandwayne/concourse, tag: latest}
      params:
        CREDHUB_CA: ((credhub_ca_cert))
        CREDHUB_SERVER: ((credhub_url))
        CREDHUB_CLIENT: ((credhub_username))
        CREDHUB_SECRET: ((credhub_password))
        cluster: ((bosh_name))/cfcr
        apiserver: https://((moltencore.public_ips.z0)):8443
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "${CREDHUB_CA}" > /tmp/ca; export CREDHUB_CA_CERT=/tmp/ca

          ca_cert_base64=$(bosh int <(credhub get -n "${cluster}/tls-kubernetes" --output-json) --path=/value/ca | base64 -w 0)
          admin_password=$(bosh int <(credhub get -n "${cluster}/kubo-admin-password" --output-json) --path=/value)

          cluster_name="cfcr/${cluster}"; user_name="${cluster_name}/cfcr-admin"; context_name="${cluster_name}"

          cat <<CONFIG
          CA_CERT="${ca_cert_base64}"; echo -e \${CA_CERT} | base64 --decode > /tmp/ca.cert
          kubectl config set-cluster "${cluster_name}" --server="${apiserver}" --certificate-authority=/tmp/ca.cert --embed-certs=true
          kubectl config set-credentials "${user_name}" --token="${admin_password}"
          kubectl config set-context "${context_name}" --cluster="${cluster_name}" --user="${user_name}"
          kubectl config use-context "${context_name}"; rm /tmp/ca.cert
          CONFIG

resources:
- name: opsfile
  type: file
  source:
    filename: opsfile.yml
    content:
      # speed up deploy
      - type: replace
        path: /update/initial_deploy_az_update_strategy?
        value: parallel
      - type: replace
        path: /update/canaries
        value: 0
      - type: replace
        path: /instance_groups/name=worker/update?/max_in_flight
        value: 100%
      - type: replace
        path: /instance_groups/name=master/update?/max_in_flight
        value: 100%
      # latest stemcell
      - path: /stemcells/alias=default/version
        type: replace
        value: latest
      # use udp backend for inner flannel (outer uses vxlan)
      - type: replace
        path: /instance_groups/name=master/jobs/name=flanneld/properties/backend-type?
        value: udp
      - type: replace
        path: /instance_groups/name=worker/jobs/name=flanneld/properties/backend-type?
        value: udp
      # scale according to cluster size
      - type: replace
        path: /instance_groups/name=master/azs
        value: ((moltencore.all_azs))
      - type: replace
        path: /instance_groups/name=master/instances
        value: ((moltencore.sizes.all_azs.x1))
      - type: replace
        path: /instance_groups/name=apply-addons/azs
        value: [ ((moltencore.singleton_az)) ]
      - type: replace
        path: /instance_groups/name=worker/azs
        value: ((moltencore.all_azs))
      - type: replace
        path: /instance_groups/name=worker/instances
        value: ((moltencore.sizes.all_azs.x2))

- name: cloud-config
  type: file
  source:
    filename: cloud-config.yml
    content:
      vm_extensions:
      - name: cfcr-master-loadbalancer
        cloud_properties:
          PortBindings:
            8443/tcp: [ { HostPort: "8443", HostIp: 0.0.0.0 } ]
          ports: [ 8443/tcp ]

- name: kubo-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-deployment
    branch: master
    tag_filter: v*

- name: deploy
  type: bosh-deployment
  source:
    deployment: cfcr
    target: ((bosh_environment))
    client: ((bosh_client))
    client_secret: ((bosh_client_secret))
    ca_cert: ((bosh_ca_cert))

- name: config
  type: bosh-config
  source:
    config: cloud
    name: k8s
    target: ((bosh_environment))
    client: ((bosh_client))
    client_secret: ((bosh_client_secret))
    ca_cert: ((bosh_ca_cert))

- name: errand
  type: bosh-errand
  source:
    deployment: cfcr
    target: ((bosh_environment))
    client: ((bosh_client))
    client_secret: ((bosh_client_secret))
    ca_cert: ((bosh_ca_cert))

- name: stemcell
  type: bosh-io-stemcell
  source: { name: ((bosh_stemcell)) }

resource_types:
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
    tag: latest

- name: file
  type: docker-image
  source:
    repository: aequitas/concourse-file-resource
    tag: latest

- name: bosh-config
  type: docker-image
  source:
    repository: cfcommunity/bosh-config-resource

- name: bosh-errand
  type: docker-image
  source:
    repository: cfcommunity/bosh2-errand-resource
